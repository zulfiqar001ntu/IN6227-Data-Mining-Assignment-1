1. Import Required Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import time
2. Load the Census Income Dataset
# URL for the Census Income dataset (Adult dataset)
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'

# Load the dataset into a DataFrame
column_names = ['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'marital_status',
                'occupation', 'relationship', 'race', 'sex', 'capital_gain', 'capital_loss',
                'hours_per_week', 'native_country', 'income']

data = pd.read_csv(url, header=None, names=column_names, na_values=' ?', skipinitialspace=True)

# Display basic information about the dataset
print(data.info())
print(data.head())
3. Data Preprocessing
# Drop rows with missing values
data = data.dropna()

# Encode categorical features using Label Encoding
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Split the data into features (X) and target (y)
X = data.drop('income', axis=1)  # Replace 'income' with the target column name
y = data['income']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Feature scaling (optional but useful for some models)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

4. Decision Tree Classifier
# Initialize the Decision Tree Classifier
decision_tree = DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=42)

# Measure training time
start_time = time.time()
decision_tree.fit(X_train, y_train)
dt_train_time = time.time() - start_time

# Predict on the test set
y_pred_dt = decision_tree.predict(X_test)

# Evaluate the Decision Tree model
print("Decision Tree Classifier:")
print("Training Time:", dt_train_time)
print("Accuracy:", accuracy_score(y_test, y_pred_dt))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_dt))
print("Classification Report:\n", classification_report(y_test, y_pred_dt))

5. Naive Bayes Classifier
# Initialize the Naive Bayes Classifier
naive_bayes = GaussianNB()

# Measure training time
start_time = time.time()
naive_bayes.fit(X_train, y_train)
nb_train_time = time.time() - start_time

# Predict on the test set
y_pred_nb = naive_bayes.predict(X_test)

# Evaluate the Naive Bayes model
print("\nNaive Bayes Classifier:")
print("Training Time:", nb_train_time)
print("Accuracy:", accuracy_score(y_test, y_pred_nb))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_nb))
print("Classification Report:\n", classification_report(y_test, y_pred_nb))

6. Comparison and Analysis
# Compare the models' performance
print("\nModel Comparison:")
print(f"Decision Tree - Training Time: {dt_train_time:.4f} seconds, Accuracy: {accuracy_score(y_test, y_pred_dt):.4f}")
print(f"Naive Bayes - Training Time: {nb_train_time:.4f} seconds, Accuracy: {accuracy_score(y_test, y_pred_nb):.4f}")

